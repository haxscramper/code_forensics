name: "Compile and execute analysis for the current repository on Arch Linux"
on: push

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # HACK The only way to clean up the github actions cache is to
  # https://github.com/actions/cache/issues/2 use the rest API, and it is
  # easier to just increment this number as needed instead of maintaining a
  # separate access token. By the way, pretty funny this is quite literally
  # the second issue that have been found in this github action and it is
  # still has no appropriate UX to this date.
  CACHE_ID: 1

jobs:
  build_image:
    # Image build is made up of several pieces, primarily from the docker
    # layer caching article[fn:1] and pieces from the documentation.
    #
    # [fn:1]: https://evilmartians.com/chronicles/build-images-on-github-actions-with-docker-layer-caching
    runs-on: ubuntu-22.04
    steps:
      # Check out the repository first time - mostly in order to get
      # the `Dockerfile` and several setup scripts that it calls
      - name: "Checkout the repository"
        uses: actions/checkout@v3

      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v2

      # In order to save time on the subsequent re-runs cache dependencies
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ env.CACHE_ID }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_ID }}-buildx-

      - name: "Log in to the Container registry"
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "Docker meta"
        # Assign ID to the step in order to access the tags information in
        # the build-push action.
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: "Build and push Docker image"
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
        # This ugly bit is necessary if you don't want your cache to grow forever
        # until it hits GitHub's limit of 5GB.
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  test:
    needs: [build_image]
    runs-on: ubuntu-22.04
    # Use arch linux because ubuntu has a fossiltech-version of the boost
    # installed and conan cannot build it because I need to use the python
    # component, which fails on the ubuntu installation.
    container:
      # HACK `env.` is not available in the `image:` expression so
      # copy-pasting the `github.repository` here instead
      image: ghcr.io/${{ github.actor }}/code_forensics:master
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}

    steps:
      - name: "Checkout the repository"
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: "Dump debugging data"
        run: |
          ls -al /github/home

        # FIXME conan cannot find the build cache and rebuilds all the
        # packages from scratch anyway. `pip` finds the installation
        # properly, but gives the warning: "WARNING: The directory
        # '/github/home/.cache/pip' or its parent directory is not owned or
        # is not writable by the current user. The cache has been disabled.
        # Check the permissions and owner of that directory. If executing
        # pip with sudo, you should use sudo's -H flag." that also seems
        # pretty suspicious.
        #
        # If I run the same container image locally it works fine.
      - name: "Install general dependencies"
        run: ./tests/ci_general_deps.sh

      - name: "Build code analyzer"
        run: ./tests/ci_general_build.sh

      - name: "Build test database"
        run: ./tests/ci_build_db.sh

      - uses: actions/upload-artifact@v3
        name: "Upload generated database"
        with:
          name: repo-database
          path: |
            nimskull.sqlite

      - name: "Execute main test commands"
        run: ./tests/ci_general_run.sh

      - uses: actions/upload-artifact@v3
        name: "Upload generated plots"
        with:
          name: burndown-plots
          path: |
            *.png
            nimskull_plots/*.png
